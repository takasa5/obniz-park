from ...utils import assert_finished, assert_send, receive_json


class TestLogicAnalyzer:
    def test_start(self, obniz):
        obniz.logicAnalyzer.start({"io": 1, "interval": 0.1, "duration": 100})

        assert_send(
            obniz, [{"logic_analyzer": {"interval": 0.1, "io": [1], "duration": 100}}]
        )
        assert_finished(obniz)

    def test_start_with_trigger(self, obniz):
        obniz.logicAnalyzer.start(
            {
                "io": 1,
                "interval": 0.1,
                "duration": 100,
                "triggerValue": False,
                "triggerValueSamples": 3,
            }
        )

        assert_send(
            obniz,
            [
                {
                    "logic_analyzer": {
                        "interval": 0.1,
                        "io": [1],
                        "duration": 100,
                        "trigger": {"samples": 3, "value": False},
                    }
                }
            ],
        )
        assert_finished(obniz)

    def test_start_with_trigger2(self, obniz):
        obniz.logicAnalyzer.start(
            {
                "io": 1,
                "interval": 0.1,
                "duration": 100,
                "triggerValue": 1,
                "triggerValueSamples": 3,
            }
        )

        assert_send(
            obniz,
            [
                {
                    "logic_analyzer": {
                        "interval": 0.1,
                        "io": [1],
                        "duration": 100,
                        "trigger": {"samples": 3, "value": True},
                    }
                }
            ],
        )
        assert_finished(obniz)

    def test_onmeasured(self, mocker, obniz):
        stub = mocker.stub()
        obniz.logicAnalyzer.start(
            {
                "io": 1,
                "interval": 0.1,
                "duration": 100,
                "triggerValue": False,
                "triggerValueSamples": 3,
            }
        )

        assert_send(
            obniz,
            [
                {
                    "logic_analyzer": {
                        "interval": 0.1,
                        "io": [1],
                        "duration": 100,
                        "trigger": {"samples": 3, "value": False},
                    }
                }
            ],
        )
        obniz.logicAnalyzer.onmeasured = stub
        data = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
        ]
        receive_json(obniz, [{"logic_analyzer": {"data": data}}])

        assert stub.call_count == 1
        assert stub.call_args[0][0] == data

        assert_finished(obniz)

    def test_onmeasured_need_pin_no(self):
        pass

    def test_finished(self, obniz):
        obniz.logicAnalyzer.start({"io": 1, "interval": 0.1, "duration": 100})

        assert_send(
            obniz, [{"logic_analyzer": {"interval": 0.1, "io": [1], "duration": 100}}]
        )
        assert_finished(obniz)

        obniz.logicAnalyzer.end()
        assert_send(obniz, [{"logic_analyzer": None}])
